# Librerias
import streamlit as st
import pickle
import pandas as pd
import numpy as np
import sklearn.metrics as metrics
# Dataframe y modelo 
df = pd.read_csv('../data/test/test.csv')
model = pickle.load(open('../models/trained_model_2.pkl','rb'))

#Titulo e imagen
st.title('Predecir si una persona puede sufrir de accidentes cerebrovasculares')
st.image("../data/dataset-cover.jpg", use_container_width=True)
st.markdown(""" 
            ## Caso de uso
Personas que tengan dudas sobre su estado actual y que crean que puedan ser propensas a tener un accidente cerebrovascular, y mediante esta r√°pida evaluaci√≥n, haciendo uso de un modelo de machine learning de clasificaci√≥n binaria, pueda saber si estan corriendo riesgo de sufrir este tipo de accidentes y trabajar con su equipo de atenci√≥n m√©dica y evaluar estos riesgos, que la mayor√≠a son prevenibles o tratables.

## Parametros
Este modelo toma en cuenta las siguientes car√°cteristicas del paciente:
* Edad
* Si presenta o ha presentado alguna vez una cardiopat√≠a
* Si sufre de diabetes, prediab√©tico o no.
* Si es fumador o no.
* Si bebe alcohol.
* Si sufre de artritis.
* Si sufre de nefropat√≠a.
* Si sufre o ha sufrido de depresi√≥n
            """)
st.markdown("***Muchas condiciones m√©dicas comunes pueden aumentar la probabilidad de tener un accidente cerebrovascular***")
st.markdown("""
            ## Primera aproximaci√≥n del modelo 
            """)

# Variables y funciones
def age_to_category(age_str): 
    age = int(age_input)
    if age >= 18 and age <= 39:
        age_category = 1
    elif age >= 40 and age <= 59:
        age_category = 2
    elif age >= 60 and age <= 79:
        age_category = 3
    elif age >= 80:
        age_category = 4
    return age_category
# Botones y dem√°s
# Edad
age_input = st.text_input("Introduce tu edad:", placeholder= '22')
if age_input.isdigit():
    st.write("El n√∫mero es:", int(age_input))
else:
    st.write("Por favor, introduce un n√∫mero v√°lido.")

# cardiopat√≠a 0:1
opt_heart_attack = {"Si": 1, "No": 0}
heart_attack = st.radio(
    "¬øHas tenido alguna cardiopat√≠a?",
    opt_heart_attack.keys(),
)

# Tiene diabetes - varios rangos
opt_diabetes = {
    "No": 0,
    "Si, pero solo durante el embarazo (mujeres)": 1,
    "Prediabetes": 2,
    "Si": 3
}
diabetes = st.radio(
    "¬øTienes diabetes?",
    opt_diabetes.keys()
)

# Es fumador - varios rangos
opt_smoker= {
    "Nunca he fumado": 0,
    "Soy exfumador": 1,
    "Fumo ocasionalmente (algunos d√≠as)": 2,
    "Fumo diariamente": 3
}
smoker = st.radio(
    "¬øEres fumador?",
    opt_smoker.keys()
)

# beber alcohol 0:1 
opt_drinker = {"Si": 1, "No": 0}
drinker = st.radio(
    "¬øBebes alcohol?",
    opt_drinker.keys()
)

# Tiene arthritis 0:1
opt_arthritis = {"Si": 1, "No": 0}
arthritis = st.radio(
    "¬øSufres de artritis?",
    opt_arthritis.keys()
)

# Tiene kidney disease 0:1
opt_kidney_disease = {"Si": 1, "No": 0}
kidney_disease = st.radio(
    "¬øSufres de nefropat√≠a (enfermedad renal)?",
    opt_kidney_disease.keys()
)

opt_depressive_disorder = {"Si": 1, "No": 0}
dep_disorder = st.radio(
    "¬øHas sufrido o sufres de depresi√≥n?",
    opt_depressive_disorder.keys()
)
if st.button("Realizar Predicci√≥n"):
    # Recoger las variables en un diccionario
    params = {
        "AgeGroup": age_to_category(age_input),
        "HadHeartAttack": opt_heart_attack[heart_attack],
        "diabetesGroup": opt_diabetes[diabetes],
        "SmokerGroup": opt_smoker[smoker],
        "AlcoholDrinkers": opt_drinker[drinker],
        "HadArthritis": opt_arthritis[arthritis],
        "HadKidneyDisease": opt_kidney_disease[kidney_disease],
        "HadDepressiveDisorder": opt_depressive_disorder[dep_disorder]
    }

    # Convertir el diccionario a un DataFrame de una fila para el modelo
    df_parametros = pd.DataFrame([params])

    st.write('Esto es lo que le pasaremos al modelo para hacer la predicci√≥n')
    st.dataframe(df_parametros, use_container_width=True)

    # Mostrar el resultado de la predicci√≥n
    pred = model.predict(df_parametros)

    st.subheader("Resultado: ")
    if pred == 0:
        st.success("No eres propenso a sufrir accidentes cerebrovasculares, por lo que puedes estar tranquilo!",icon="‚úÖ")
    else:
        st.warning('Tienes indicios de poder sufrir un accidente cerebrovascular, te recomendamos acudas a tu m√©dico de cabecera', icon="üö®")

    st.write('M√©tricas de test')

    X = df[['AgeGroup', 'HadHeartAttack', 'diabetesGroup','SmokerGroup', 'AlcoholDrinkers', 'HadArthritis','HadKidneyDisease', 'HadDepressiveDisorder']]
    y = df['HadStroke']
    y_pred = model.predict(X)

    df_test = pd.DataFrame({"Real": y, 
                        "Pred": y_pred})
    st.dataframe(df_test)

    st.write(f'accuracy_score', metrics.accuracy_score(y,y_pred))
    st.write(f'precision_score', metrics.precision_score(y,y_pred))
    st.write(f'recall_score', metrics.recall_score(y,y_pred))

"""
Feedback: 
1. Secci√≥n de informaci√≥n: Ser mucho m√°s claro al principio del modelo. Es decir, incitar
al usuario a usar la aplicaci√≥n sin ser tan explicativo. A las malas a√±adir info adicional
debajo de cada una de las variables. o tambi√©n a√±adir una secci√≥n de 'Quieres saber
como funciona este modelo?' O UN BOT√ìN ? AL LADO DE LAS VARIABLES A INTRODUCIR
2. Nombre del modelo: lo mismo, llamar al usuario a usarlo. ver ejemplos de landingpage
de pandas o de numpy, pyplot etc.
3. M√©tricas del test: bien, pero explicarlas en vez de ense√±arlas. En el propio FAQ traducir
las metricas, por ejemplo con el recall 'El 60% de los pacientes te los predecir√° bien'
4. Resultados: Utilizar el predict_proba para a√±adir varias posibilidades de predicci√≥n.
Ejemplo: 20% de probabilidad: Eres poco propenso a sufrir de este tipo de accidentes
Ejemplo: 40% de probabilidad: No eres propenso a sufrir este tipo de accidentes, aunque 
recomendamos acudas a tu equipo m√©dico para comprobarlo.
5. Propuesta de valor: la herramienta va dedicada a p√°ginas web de clinicas, hospitales y
aseguradoras, incitando a la consulta m√©dica siempre y cuando haya probabilidad de accidente
Otro modelo de redes neuronales para predecir si el usuario puede tener accidentes neuronales
orientado a predicciones m√©dicas que ayuden al m√©dico a tomar una decisi√≥n

1era idea: Fondo de un paciente hablando con un medico, titulo 'La prevenci√≥n de accidentes cerebrovasculares pueden ser sencillas de evitar', 
un boton de 'haz un primer diagnostico ahora', un footer de aviso 'este cuestionario no deberia tomarse como una recomendaci√≥n m√©dica m√°s all√°
de una primera aproximaci√≥n de si estas en riesgo de sufrir este tipo de accidentes.
"""

